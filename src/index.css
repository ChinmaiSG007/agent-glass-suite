@tailwind base;
@tailwind components;
@tailwind utilities;

/* Multi Agent Verification System - Glass Morphism Design System */

@layer base {
  :root {
    /* Glass Morphism Color Palette - 4 Colors Max */
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    /* Primary - Deep Purple/Blue for main actions */
    --primary: 262 83% 58%;
    --primary-foreground: 0 0% 98%;
    --primary-glow: 262 83% 68%;

    /* Secondary - Cyan accent */
    --secondary: 186 100% 60%;
    --secondary-foreground: 240 10% 3.9%;
    --secondary-glow: 186 100% 70%;

    /* Success - Green for passing tests */
    --success: 142 76% 36%;
    --success-foreground: 0 0% 98%;
    --success-glow: 142 76% 46%;

    /* Warning/Error - Orange for failed tests */
    --warning: 24 95% 53%;
    --warning-foreground: 0 0% 98%;
    --warning-glow: 24 95% 63%;

    /* Glass morphism surfaces */
    --glass: 240 10% 8%;
    --glass-light: 240 10% 12%;
    --glass-border: 240 10% 20%;
    
    /* Neutral tones */
    --muted: 240 5% 20%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 10% 15%;
    --accent-foreground: 240 5% 90%;

    /* UI Elements */
    --card: 240 10% 8%;
    --card-foreground: 0 0% 98%;
    --border: 240 10% 20%;
    --input: 240 10% 15%;
    --ring: 262 83% 58%;

    --radius: 1rem;

    /* Gradients for glass effects */
    --gradient-primary: linear-gradient(135deg, hsl(var(--primary) / 0.8), hsl(var(--primary-glow) / 0.6));
    --gradient-secondary: linear-gradient(135deg, hsl(var(--secondary) / 0.8), hsl(var(--secondary-glow) / 0.6));
    --gradient-glass: linear-gradient(135deg, hsl(var(--glass) / 0.4), hsl(var(--glass-light) / 0.6));
    
    /* Glass morphism shadows */
    --shadow-glass: 0 8px 32px 0 hsl(var(--primary) / 0.1);
    --shadow-glow: 0 0 50px hsl(var(--primary) / 0.3);
    --shadow-success: 0 0 30px hsl(var(--success) / 0.3);
    --shadow-warning: 0 0 30px hsl(var(--warning) / 0.3);
    
    /* Transitions */
    --transition-glass: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-glow: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground overflow-x-hidden;
    background: radial-gradient(ellipse at top, hsl(var(--primary) / 0.05) 0%, hsl(var(--background)) 70%);
  }
}

@layer components {
  /* Glass morphism utilities */
  .glass {
    background: hsl(var(--glass) / 0.4);
    backdrop-filter: blur(20px);
    border: 1px solid hsl(var(--glass-border) / 0.3);
    box-shadow: var(--shadow-glass);
  }
  
  .glass-light {
    background: hsl(var(--glass-light) / 0.6);
    backdrop-filter: blur(16px);
    border: 1px solid hsl(var(--glass-border) / 0.2);
  }
  
  .glow-primary {
    box-shadow: var(--shadow-glow);
    transition: var(--transition-glow);
  }
  
  .glow-success {
    box-shadow: var(--shadow-success);
  }
  
  .glow-warning {
    box-shadow: var(--shadow-warning);
  }
  
  .animate-float {
    animation: float 6s ease-in-out infinite;
  }
  
  .animate-pulse-slow {
    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  .animate-glow {
    animation: glow 2s ease-in-out infinite alternate;
  }
}

@layer utilities {
  .text-gradient-primary {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .text-gradient-secondary {
    background: var(--gradient-secondary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .bg-gradient-glass {
    background: var(--gradient-glass);
  }
}

@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes glow {
  from { box-shadow: 0 0 20px hsl(var(--primary) / 0.2); }
  to { box-shadow: 0 0 30px hsl(var(--primary) / 0.4), 0 0 40px hsl(var(--primary) / 0.2); }
}